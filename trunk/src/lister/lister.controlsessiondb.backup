--
-- PostgreSQL database dump
--

-- Dumped from database version 9.0.1
-- Dumped by pg_dump version 9.0.1
-- Started on 2011-01-08 15:14:27

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 1748 (class 1259 OID 17054)
-- Dependencies: 7
-- Name: actionlog; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE actionlog (
    actionid integer NOT NULL,
    note text NOT NULL,
    whenadded timestamp with time zone
);


ALTER TABLE public.actionlog OWNER TO postgres;

--
-- TOC entry 1747 (class 1259 OID 17052)
-- Dependencies: 1748 7
-- Name: actionlog_actionid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE actionlog_actionid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.actionlog_actionid_seq OWNER TO postgres;

--
-- TOC entry 2184 (class 0 OID 0)
-- Dependencies: 1747
-- Name: actionlog_actionid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE actionlog_actionid_seq OWNED BY actionlog.actionid;


--
-- TOC entry 2185 (class 0 OID 0)
-- Dependencies: 1747
-- Name: actionlog_actionid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('actionlog_actionid_seq', 112, true);


--
-- TOC entry 1769 (class 1259 OID 17259)
-- Dependencies: 7
-- Name: columns; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE columns (
    colid integer NOT NULL,
    colname character varying(200),
    srccolcode character varying(200),
    srcdatatypcode character varying(100),
    srcdatatypwdth integer,
    srcdataffstartpos integer,
    srcdatafffinpos integer,
    tbid integer,
    physord integer,
    note text,
    srcdatatypdec integer,
    expwrapinquotes boolean,
    bestfitwdth integer
);


ALTER TABLE public.columns OWNER TO postgres;

--
-- TOC entry 2186 (class 0 OID 0)
-- Dependencies: 1769
-- Name: TABLE columns; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE columns IS 'or field mappings for flat files (FF)';


--
-- TOC entry 2187 (class 0 OID 0)
-- Dependencies: 1769
-- Name: COLUMN columns.bestfitwdth; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN columns.bestfitwdth IS 'Most common say.... 4 sigma width';


--
-- TOC entry 1768 (class 1259 OID 17257)
-- Dependencies: 1769 7
-- Name: columns_colid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE columns_colid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.columns_colid_seq OWNER TO postgres;

--
-- TOC entry 2188 (class 0 OID 0)
-- Dependencies: 1768
-- Name: columns_colid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE columns_colid_seq OWNED BY columns.colid;


--
-- TOC entry 2189 (class 0 OID 0)
-- Dependencies: 1768
-- Name: columns_colid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('columns_colid_seq', 50, true);


--
-- TOC entry 1759 (class 1259 OID 17153)
-- Dependencies: 7
-- Name: comptyps; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE comptyps (
    comptypid integer NOT NULL,
    comptypname character varying(100) NOT NULL,
    note text
);


ALTER TABLE public.comptyps OWNER TO postgres;

--
-- TOC entry 2190 (class 0 OID 0)
-- Dependencies: 1759
-- Name: TABLE comptyps; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE comptyps IS 'Comparison Operation type in testing.
Each test has a test type, and each type involves invoking some code, which performs the Comparison Op listed here.

Comp Ops: (Not is a bit flag in the test table)
- Equals
- In List
- Between
- Series (Odds, Evens, Prime?, Evenly divisible by x)
- > than x
- < than x
- >= than x
- <= than x
- between x and y (inclusive)
- starts with
- starts with after trim
- ends with
- ends with after trim
- contains
- regex PCE
- integer
- digit
- letter
- all uppercase
- all lowercase
';


--
-- TOC entry 1758 (class 1259 OID 17151)
-- Dependencies: 7 1759
-- Name: comptyp_compid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE comptyp_compid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comptyp_compid_seq OWNER TO postgres;

--
-- TOC entry 2192 (class 0 OID 0)
-- Dependencies: 1758
-- Name: comptyp_compid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE comptyp_compid_seq OWNED BY comptyps.comptypid;


--
-- TOC entry 2193 (class 0 OID 0)
-- Dependencies: 1758
-- Name: comptyp_compid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('comptyp_compid_seq', 16, true);


--
-- TOC entry 1713 (class 1259 OID 16683)
-- Dependencies: 7
-- Name: connections; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE connections (
    connid integer NOT NULL,
    loginid integer NOT NULL,
    instanceid integer NOT NULL,
    note text,
    lastsucceeddatetime timestamp with time zone,
    lastfaildatetime timestamp with time zone,
    connname character varying(100),
    dbname character varying(200)
);


ALTER TABLE public.connections OWNER TO postgres;

--
-- TOC entry 2194 (class 0 OID 0)
-- Dependencies: 1713
-- Name: TABLE connections; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE connections IS 'Join logins to instances.  I can login (using TOAD) to D426 wth several logins, each one goes here.
Some work some don''t anymore.  They each have a last fail and last succeed date.
';


--
-- TOC entry 2195 (class 0 OID 0)
-- Dependencies: 1713
-- Name: COLUMN connections.connid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN connections.connid IS 'Note that GetLastInsertedID function in code will try to build pk serial sequence name from table name and this field name, so be careful when changing.';


--
-- TOC entry 2196 (class 0 OID 0)
-- Dependencies: 1713
-- Name: COLUMN connections.loginid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN connections.loginid IS 'login string and password pair are stored in separate table.';


--
-- TOC entry 2197 (class 0 OID 0)
-- Dependencies: 1713
-- Name: COLUMN connections.instanceid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN connections.instanceid IS 'What instance this connection is to. Multiple instances can sit on the same server.  In DB, this may be the actual database name, as in BACKOFF400, though I believe there is only one per server.';


--
-- TOC entry 2198 (class 0 OID 0)
-- Dependencies: 1713
-- Name: COLUMN connections.connname; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN connections.connname IS 'Unique name of the connection.  I always lead with the connection environment chain or system name so its easier to read, for example, CSDR-Dev.  Or CSDR-Power, to show a powerful connection with maybe alter and drop table capabilities, not to be used lightly.';


--
-- TOC entry 2199 (class 0 OID 0)
-- Dependencies: 1713
-- Name: COLUMN connections.dbname; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN connections.dbname IS 'Connections to PostgreSQL provide the database name.  SQL server supports a default database to connect, which will greatly affect SQL that expects this and does not name the database in a 3-part query format.  Tests would break.
Should possibly be linking to the dbs table, but U++ dropgrid object may not support dynamic filtering when used in GridCtrl for an embedded Object Ctrl.  Another words, it would show all dbs across all instances!  Difficult to use.';


--
-- TOC entry 1712 (class 1259 OID 16681)
-- Dependencies: 1713 7
-- Name: connections_connid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE connections_connid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.connections_connid_seq OWNER TO postgres;

--
-- TOC entry 2201 (class 0 OID 0)
-- Dependencies: 1712
-- Name: connections_connid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE connections_connid_seq OWNED BY connections.connid;


--
-- TOC entry 2202 (class 0 OID 0)
-- Dependencies: 1712
-- Name: connections_connid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('connections_connid_seq', 95, true);


--
-- TOC entry 1767 (class 1259 OID 17246)
-- Dependencies: 7
-- Name: contactidentifiers; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE contactidentifiers (
    identid integer NOT NULL,
    identifier character varying(200) NOT NULL,
    contactid integer,
    identtypid integer
);


ALTER TABLE public.contactidentifiers OWNER TO postgres;

--
-- TOC entry 2203 (class 0 OID 0)
-- Dependencies: 1767
-- Name: TABLE contactidentifiers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE contactidentifiers IS 'strings that identify a contact: For instance Bill MacSweeny, or William MacSwiney??? No one gets it right, so we put both here. I don''t even care which is right, just need a single key.

Also, sales rep identifiers can link here, logins, etc.  An FTS rapid search resolves to a set of contact ids, which we distinct on, and get hopefully one.';


--
-- TOC entry 1766 (class 1259 OID 17244)
-- Dependencies: 1767 7
-- Name: contactidentifiers_identid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE contactidentifiers_identid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contactidentifiers_identid_seq OWNER TO postgres;

--
-- TOC entry 2204 (class 0 OID 0)
-- Dependencies: 1766
-- Name: contactidentifiers_identid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE contactidentifiers_identid_seq OWNED BY contactidentifiers.identid;


--
-- TOC entry 2205 (class 0 OID 0)
-- Dependencies: 1766
-- Name: contactidentifiers_identid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('contactidentifiers_identid_seq', 13, true);


--
-- TOC entry 1765 (class 1259 OID 17235)
-- Dependencies: 7
-- Name: contacts; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE contacts (
    pkcontact integer NOT NULL,
    contactname character varying(200) NOT NULL,
    email character varying(200),
    note text
);


ALTER TABLE public.contacts OWNER TO postgres;

--
-- TOC entry 2206 (class 0 OID 0)
-- Dependencies: 1765
-- Name: TABLE contacts; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE contacts IS 'Includes users with syslogins and externals, like BB support people, their email, etc.';


--
-- TOC entry 1764 (class 1259 OID 17233)
-- Dependencies: 1765 7
-- Name: contacts_pkcontact_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE contacts_pkcontact_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contacts_pkcontact_seq OWNER TO postgres;

--
-- TOC entry 2207 (class 0 OID 0)
-- Dependencies: 1764
-- Name: contacts_pkcontact_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE contacts_pkcontact_seq OWNED BY contacts.pkcontact;


--
-- TOC entry 2208 (class 0 OID 0)
-- Dependencies: 1764
-- Name: contacts_pkcontact_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('contacts_pkcontact_seq', 40, true);


--
-- TOC entry 1715 (class 1259 OID 16692)
-- Dependencies: 7
-- Name: databases; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE databases (
    dbid integer NOT NULL,
    dbname character varying(100) NOT NULL,
    note text,
    dbaddress character varying(200)
);


ALTER TABLE public.databases OWNER TO postgres;

--
-- TOC entry 2209 (class 0 OID 0)
-- Dependencies: 1715
-- Name: TABLE databases; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE databases IS 'Mostly for sql server where perms are per database.  In Oracle, there is no schema level perm, but you can logically access a schema.';


--
-- TOC entry 1714 (class 1259 OID 16690)
-- Dependencies: 7 1715
-- Name: dbs_dbid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE dbs_dbid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dbs_dbid_seq OWNER TO postgres;

--
-- TOC entry 2211 (class 0 OID 0)
-- Dependencies: 1714
-- Name: dbs_dbid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE dbs_dbid_seq OWNED BY databases.dbid;


--
-- TOC entry 2212 (class 0 OID 0)
-- Dependencies: 1714
-- Name: dbs_dbid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('dbs_dbid_seq', 1, false);


--
-- TOC entry 1753 (class 1259 OID 17095)
-- Dependencies: 7
-- Name: dual; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dual (
    dummy character(1) NOT NULL
);


ALTER TABLE public.dual OWNER TO postgres;

--
-- TOC entry 2213 (class 0 OID 0)
-- Dependencies: 1753
-- Name: TABLE dual; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE dual IS 'dummy one-row table for uses.';


--
-- TOC entry 1717 (class 1259 OID 16701)
-- Dependencies: 7
-- Name: environments; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE environments (
    envid integer NOT NULL,
    envstdname character varying(100) NOT NULL,
    note text,
    envlngname character varying(100),
    envshrtname character varying(40),
    envletter character(1)
);


ALTER TABLE public.environments OWNER TO postgres;

--
-- TOC entry 2214 (class 0 OID 0)
-- Dependencies: 1717
-- Name: TABLE environments; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE environments IS 'environments that an instance or a database or server supports.

-3 = supports several environments, you need to look at the hosted objects.  Could be a bit map?  But then linking....
';


--
-- TOC entry 2215 (class 0 OID 0)
-- Dependencies: 1717
-- Name: COLUMN environments.envstdname; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN environments.envstdname IS 'Standard name that people say on a phone, like "Is it in dev?", not is it in Development.';


--
-- TOC entry 1716 (class 1259 OID 16699)
-- Dependencies: 1717 7
-- Name: environments_envid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE environments_envid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.environments_envid_seq OWNER TO postgres;

--
-- TOC entry 2217 (class 0 OID 0)
-- Dependencies: 1716
-- Name: environments_envid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE environments_envid_seq OWNED BY environments.envid;


--
-- TOC entry 2218 (class 0 OID 0)
-- Dependencies: 1716
-- Name: environments_envid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('environments_envid_seq', 1, false);


--
-- TOC entry 1719 (class 1259 OID 16710)
-- Dependencies: 7
-- Name: instances; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE instances (
    instanceid integer NOT NULL,
    instancename character varying(100) NOT NULL,
    instanceaddress character varying(100) NOT NULL,
    note text,
    insttypid integer,
    envid integer,
    port integer
);


ALTER TABLE public.instances OWNER TO postgres;

--
-- TOC entry 2219 (class 0 OID 0)
-- Dependencies: 1719
-- Name: TABLE instances; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE instances IS 'On oracle, D426, U426, the SID.
On SQL Server XXXX/DB, port';


--
-- TOC entry 2220 (class 0 OID 0)
-- Dependencies: 1719
-- Name: COLUMN instances.instancename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN instances.instancename IS 'For oracle, can be the SID or global name.';


--
-- TOC entry 2221 (class 0 OID 0)
-- Dependencies: 1719
-- Name: COLUMN instances.instanceaddress; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN instances.instanceaddress IS 'computer address either an IP or a DNS resolvable name.  This is what would be TNSPING''d for Oracle.';


--
-- TOC entry 2222 (class 0 OID 0)
-- Dependencies: 1719
-- Name: COLUMN instances.insttypid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN instances.insttypid IS 'What some call the database type or vendor, the brand.  SQL Server, Oracle, etc.  NOT the version, as in Oracle7, SQL Server 2000.  This is used in the Connection creation, and generally the same client connection code can be used across versions.  If not, another attribute in the instance row must dictate that specifically for this instance.';


--
-- TOC entry 2223 (class 0 OID 0)
-- Dependencies: 1719
-- Name: COLUMN instances.envid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN instances.envid IS 'What business environment does this instance support?  There is -2 for when this is multiple environments, or -1 when not known.  The concept of a "devprod" may be created, since I develop in and use for real productive work connections from the same database (shock!)';


--
-- TOC entry 2224 (class 0 OID 0)
-- Dependencies: 1719
-- Name: COLUMN instances.port; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN instances.port IS 'For cases when the port is not the default and is necessary for the connection, or for documentation.  If not necessary for connecting, there should be an attribute to say so, because these often are changed by production support, and if forcibly passed when not necessary, you create an unnecessary breakage point in the future.';


--
-- TOC entry 1718 (class 1259 OID 16708)
-- Dependencies: 7 1719
-- Name: instances_instanceid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE instances_instanceid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.instances_instanceid_seq OWNER TO postgres;

--
-- TOC entry 2226 (class 0 OID 0)
-- Dependencies: 1718
-- Name: instances_instanceid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE instances_instanceid_seq OWNED BY instances.instanceid;


--
-- TOC entry 2227 (class 0 OID 0)
-- Dependencies: 1718
-- Name: instances_instanceid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('instances_instanceid_seq', 80, true);


--
-- TOC entry 1721 (class 1259 OID 16719)
-- Dependencies: 7
-- Name: insttyps; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE insttyps (
    insttypid integer NOT NULL,
    insttypname character varying(40) NOT NULL,
    note text
);


ALTER TABLE public.insttyps OWNER TO postgres;

--
-- TOC entry 2228 (class 0 OID 0)
-- Dependencies: 1721
-- Name: TABLE insttyps; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE insttyps IS 'instances of server databases, what type they are?
SQL Server?
Not version.';


--
-- TOC entry 1720 (class 1259 OID 16717)
-- Dependencies: 1721 7
-- Name: insttyps_insttypid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE insttyps_insttypid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.insttyps_insttypid_seq OWNER TO postgres;

--
-- TOC entry 2230 (class 0 OID 0)
-- Dependencies: 1720
-- Name: insttyps_insttypid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE insttyps_insttypid_seq OWNED BY insttyps.insttypid;


--
-- TOC entry 2231 (class 0 OID 0)
-- Dependencies: 1720
-- Name: insttyps_insttypid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('insttyps_insttypid_seq', 23, true);


--
-- TOC entry 1763 (class 1259 OID 17220)
-- Dependencies: 7
-- Name: listertables; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE listertables (
    listertbid integer NOT NULL,
    listertbname character varying(200) NOT NULL,
    physicaltbname character varying(200) NOT NULL,
    shortphysicalname character varying NOT NULL,
    "nameunique?" boolean NOT NULL,
    note text
);


ALTER TABLE public.listertables OWNER TO postgres;

--
-- TOC entry 2232 (class 0 OID 0)
-- Dependencies: 1763
-- Name: TABLE listertables; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE listertables IS 'all tables listed here.  These are here so we can automagically generate all the little tables.

So its <Name<s/es> for the table name
pk is always <pk>singular short name
ak is always <ak>singular short name
<shortname<id> for pk field, always serial, and not null
<shortname<name> for name, and flag for must be unique
<note> always nullable
all timestamps with tz?
';


--
-- TOC entry 1762 (class 1259 OID 17218)
-- Dependencies: 7 1763
-- Name: listertables_listertableid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE listertables_listertableid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.listertables_listertableid_seq OWNER TO postgres;

--
-- TOC entry 2233 (class 0 OID 0)
-- Dependencies: 1762
-- Name: listertables_listertableid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE listertables_listertableid_seq OWNED BY listertables.listertbid;


--
-- TOC entry 2234 (class 0 OID 0)
-- Dependencies: 1762
-- Name: listertables_listertableid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('listertables_listertableid_seq', 43, true);


--
-- TOC entry 1723 (class 1259 OID 16728)
-- Dependencies: 7
-- Name: logins; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE logins (
    loginid integer NOT NULL,
    loginstr character varying(40) NOT NULL,
    loginpwd character varying(100),
    islegit boolean
);


ALTER TABLE public.logins OWNER TO postgres;

--
-- TOC entry 2235 (class 0 OID 0)
-- Dependencies: 1723
-- Name: TABLE logins; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE logins IS 'just a login paired with a password.';


--
-- TOC entry 2236 (class 0 OID 0)
-- Dependencies: 1723
-- Name: COLUMN logins.loginstr; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN logins.loginstr IS 'actual string entered into interface';


--
-- TOC entry 2237 (class 0 OID 0)
-- Dependencies: 1723
-- Name: COLUMN logins.islegit; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN logins.islegit IS 'gained officially and available for safe, open use.';


--
-- TOC entry 1722 (class 1259 OID 16726)
-- Dependencies: 7 1723
-- Name: logins_loginid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE logins_loginid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.logins_loginid_seq OWNER TO postgres;

--
-- TOC entry 2239 (class 0 OID 0)
-- Dependencies: 1722
-- Name: logins_loginid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE logins_loginid_seq OWNED BY logins.loginid;


--
-- TOC entry 2240 (class 0 OID 0)
-- Dependencies: 1722
-- Name: logins_loginid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('logins_loginid_seq', 86, true);


--
-- TOC entry 1752 (class 1259 OID 17082)
-- Dependencies: 7
-- Name: macros; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE macros (
    macid integer NOT NULL,
    macname character varying(200) NOT NULL,
    iftext character varying(400) NOT NULL,
    thentext character varying(400) NOT NULL
);


ALTER TABLE public.macros OWNER TO postgres;

--
-- TOC entry 2241 (class 0 OID 0)
-- Dependencies: 1752
-- Name: TABLE macros; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE macros IS 'macros that are actively applied to executed scripts whenever their connection is activated, or user, project, etc.';


--
-- TOC entry 1751 (class 1259 OID 17080)
-- Dependencies: 7 1752
-- Name: macros_macid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE macros_macid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.macros_macid_seq OWNER TO postgres;

--
-- TOC entry 2242 (class 0 OID 0)
-- Dependencies: 1751
-- Name: macros_macid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE macros_macid_seq OWNED BY macros.macid;


--
-- TOC entry 2243 (class 0 OID 0)
-- Dependencies: 1751
-- Name: macros_macid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('macros_macid_seq', 4, true);


--
-- TOC entry 1725 (class 1259 OID 16734)
-- Dependencies: 7
-- Name: oses; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE oses (
    osid integer NOT NULL,
    osname character varying(100),
    note text
);


ALTER TABLE public.oses OWNER TO postgres;

--
-- TOC entry 2244 (class 0 OID 0)
-- Dependencies: 1725
-- Name: TABLE oses; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE oses IS 'Operating Systems that servers sit on';


--
-- TOC entry 1724 (class 1259 OID 16732)
-- Dependencies: 1725 7
-- Name: oses_osid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE oses_osid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.oses_osid_seq OWNER TO postgres;

--
-- TOC entry 2246 (class 0 OID 0)
-- Dependencies: 1724
-- Name: oses_osid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE oses_osid_seq OWNED BY oses.osid;


--
-- TOC entry 2247 (class 0 OID 0)
-- Dependencies: 1724
-- Name: oses_osid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('oses_osid_seq', 1, false);


--
-- TOC entry 1761 (class 1259 OID 17205)
-- Dependencies: 7
-- Name: portable_executables; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE portable_executables (
    libid integer NOT NULL,
    libname character varying(200) NOT NULL,
    libpath character varying(1000),
    filesize integer,
    version character varying(100),
    note text,
    filetimestamp timestamp without time zone
);


ALTER TABLE public.portable_executables OWNER TO postgres;

--
-- TOC entry 2248 (class 0 OID 0)
-- Dependencies: 1761
-- Name: TABLE portable_executables; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE portable_executables IS 'dlls, sos so we can track what works.';


--
-- TOC entry 1760 (class 1259 OID 17203)
-- Dependencies: 7 1761
-- Name: portable_executables_libid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE portable_executables_libid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.portable_executables_libid_seq OWNER TO postgres;

--
-- TOC entry 2249 (class 0 OID 0)
-- Dependencies: 1760
-- Name: portable_executables_libid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE portable_executables_libid_seq OWNED BY portable_executables.libid;


--
-- TOC entry 2250 (class 0 OID 0)
-- Dependencies: 1760
-- Name: portable_executables_libid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('portable_executables_libid_seq', 29, true);


--
-- TOC entry 1773 (class 1259 OID 17286)
-- Dependencies: 7
-- Name: projects; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE projects (
    projectname character varying(400),
    projectbriefname character varying(100),
    note text,
    projectid integer NOT NULL,
    masterprojectname character varying(400)
);


ALTER TABLE public.projects OWNER TO postgres;

--
-- TOC entry 2251 (class 0 OID 0)
-- Dependencies: 1773
-- Name: TABLE projects; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE projects IS 'Projects, not necessarily a big deal, just a way to group Tasks together for prioritization.';


--
-- TOC entry 1772 (class 1259 OID 17284)
-- Dependencies: 1773 7
-- Name: projects_projectid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE projects_projectid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.projects_projectid_seq OWNER TO postgres;

--
-- TOC entry 2252 (class 0 OID 0)
-- Dependencies: 1772
-- Name: projects_projectid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE projects_projectid_seq OWNED BY projects.projectid;


--
-- TOC entry 2253 (class 0 OID 0)
-- Dependencies: 1772
-- Name: projects_projectid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('projects_projectid_seq', 1, true);


--
-- TOC entry 1775 (class 1259 OID 17300)
-- Dependencies: 7
-- Name: relations; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE relations (
    relid integer NOT NULL,
    fromid integer NOT NULL,
    toid integer NOT NULL,
    why character varying(200),
    note text,
    fromtbid integer,
    totbid integer
)
WITH (autovacuum_enabled=true);


ALTER TABLE public.relations OWNER TO postgres;

--
-- TOC entry 2254 (class 0 OID 0)
-- Dependencies: 1775
-- Name: TABLE relations; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE relations IS 'relation table describing relationship between anything with an id.

This is for from to relations.';


--
-- TOC entry 1774 (class 1259 OID 17298)
-- Dependencies: 1775 7
-- Name: relations_relid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE relations_relid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.relations_relid_seq OWNER TO postgres;

--
-- TOC entry 2255 (class 0 OID 0)
-- Dependencies: 1774
-- Name: relations_relid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE relations_relid_seq OWNED BY relations.relid;


--
-- TOC entry 2256 (class 0 OID 0)
-- Dependencies: 1774
-- Name: relations_relid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('relations_relid_seq', 1, false);


--
-- TOC entry 1750 (class 1259 OID 17069)
-- Dependencies: 2070 7
-- Name: scripts; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE scripts (
    scriptid integer NOT NULL,
    script text NOT NULL,
    scriptname character varying(200),
    addtimestamp time with time zone DEFAULT now(),
    richscript text,
    note text
);


ALTER TABLE public.scripts OWNER TO postgres;

--
-- TOC entry 2257 (class 0 OID 0)
-- Dependencies: 1750
-- Name: TABLE scripts; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE scripts IS 'scripts to execute against connections.';


--
-- TOC entry 1749 (class 1259 OID 17067)
-- Dependencies: 1750 7
-- Name: scripts_scriptid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE scripts_scriptid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.scripts_scriptid_seq OWNER TO postgres;

--
-- TOC entry 2259 (class 0 OID 0)
-- Dependencies: 1749
-- Name: scripts_scriptid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE scripts_scriptid_seq OWNED BY scripts.scriptid;


--
-- TOC entry 2260 (class 0 OID 0)
-- Dependencies: 1749
-- Name: scripts_scriptid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('scripts_scriptid_seq', 94, true);


--
-- TOC entry 1727 (class 1259 OID 16743)
-- Dependencies: 7
-- Name: servers; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE servers (
    serverid integer NOT NULL,
    serveraddress character varying(40) NOT NULL,
    note text,
    osid integer
);


ALTER TABLE public.servers OWNER TO postgres;

--
-- TOC entry 1726 (class 1259 OID 16741)
-- Dependencies: 7 1727
-- Name: servers_serverid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE servers_serverid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.servers_serverid_seq OWNER TO postgres;

--
-- TOC entry 2262 (class 0 OID 0)
-- Dependencies: 1726
-- Name: servers_serverid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE servers_serverid_seq OWNED BY servers.serverid;


--
-- TOC entry 2263 (class 0 OID 0)
-- Dependencies: 1726
-- Name: servers_serverid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('servers_serverid_seq', 1, false);


--
-- TOC entry 1729 (class 1259 OID 16752)
-- Dependencies: 7
-- Name: tables; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tables (
    tbid integer NOT NULL,
    tbname character varying(100) NOT NULL,
    tbaddress character varying(300),
    note text
);


ALTER TABLE public.tables OWNER TO postgres;

--
-- TOC entry 2264 (class 0 OID 0)
-- Dependencies: 1729
-- Name: TABLE tables; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE tables IS 'or views, or mat views, or...';


--
-- TOC entry 1728 (class 1259 OID 16750)
-- Dependencies: 7 1729
-- Name: tables_tbid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tables_tbid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tables_tbid_seq OWNER TO postgres;

--
-- TOC entry 2266 (class 0 OID 0)
-- Dependencies: 1728
-- Name: tables_tbid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tables_tbid_seq OWNED BY tables.tbid;


--
-- TOC entry 2267 (class 0 OID 0)
-- Dependencies: 1728
-- Name: tables_tbid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('tables_tbid_seq', 11, true);


--
-- TOC entry 1771 (class 1259 OID 17275)
-- Dependencies: 7
-- Name: tasks; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tasks (
    taskid integer NOT NULL,
    srccode character varying(100),
    note text,
    priorityassigneddate timestamp with time zone,
    assignedbywho character varying(100),
    projectname character varying(100),
    prioritywithinproject integer,
    taskname character varying(200)
);


ALTER TABLE public.tasks OWNER TO postgres;

--
-- TOC entry 2268 (class 0 OID 0)
-- Dependencies: 1771
-- Name: TABLE tasks; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE tasks IS 'List of QCs and tasks, linkage to QC system.  Some are not QCs.  Assigned from user or elsewhere, date assigned.';


--
-- TOC entry 2269 (class 0 OID 0)
-- Dependencies: 1771
-- Name: COLUMN tasks.priorityassigneddate; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tasks.priorityassigneddate IS 'Assigned by user/manager as high priority on this date.  This changes (sarcastic harumph here).';


--
-- TOC entry 2270 (class 0 OID 0)
-- Dependencies: 1771
-- Name: COLUMN tasks.projectname; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tasks.projectname IS 'Use to group a set of tasks for prioritization. Unlike QCs, which have priorities across all time and space, making them meaningless.';


--
-- TOC entry 2271 (class 0 OID 0)
-- Dependencies: 1771
-- Name: COLUMN tasks.prioritywithinproject; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tasks.prioritywithinproject IS 'Within same "projectname", 0 is top priority.';


--
-- TOC entry 1770 (class 1259 OID 17273)
-- Dependencies: 7 1771
-- Name: tasks_taskid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tasks_taskid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tasks_taskid_seq OWNER TO postgres;

--
-- TOC entry 2273 (class 0 OID 0)
-- Dependencies: 1770
-- Name: tasks_taskid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tasks_taskid_seq OWNED BY tasks.taskid;


--
-- TOC entry 2274 (class 0 OID 0)
-- Dependencies: 1770
-- Name: tasks_taskid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('tasks_taskid_seq', 8, true);


--
-- TOC entry 1755 (class 1259 OID 17104)
-- Dependencies: 2073 2074 2075 7
-- Name: tests; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tests (
    testid integer NOT NULL,
    testname character varying(200),
    note text,
    scriptid integer NOT NULL,
    whenadded timestamp with time zone DEFAULT now() NOT NULL,
    connid integer,
    desiredoutcome character(1) DEFAULT 'P'::bpchar NOT NULL,
    actualoutcome character(1),
    outputvalue character varying(400),
    x character varying(400),
    y character varying(400),
    invertcomparison boolean DEFAULT false NOT NULL,
    comptypid integer,
    testtypid integer
);


ALTER TABLE public.tests OWNER TO postgres;

--
-- TOC entry 2275 (class 0 OID 0)
-- Dependencies: 1755
-- Name: TABLE tests; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE tests IS 'Single scripts that output a single (?) value at 0.
The test is either positive or negative.  If 0 rows returned, pass/fail/indeterminate, plus if 1 row, the same
and x or greater rows, pass/fail/indeterminate
if 1 row back, then if = x pass/fail/indeterminate
   if != pass/fail/indeterminate
   if between, not between, starts with, starts with after trim,
  ends with, ends with after trim, contains, not contains,
  not starts with, not ends with,';


--
-- TOC entry 2276 (class 0 OID 0)
-- Dependencies: 1755
-- Name: COLUMN tests.connid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tests.connid IS 'Links to the connection object that this test is to be run against.  -3 may indicate multi-values?  For now, all tests are a single script against a single connection.';


--
-- TOC entry 2277 (class 0 OID 0)
-- Dependencies: 1755
-- Name: COLUMN tests.desiredoutcome; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tests.desiredoutcome IS 'What we want the outcome of the test to be: Either P)ass or F)ail.';


--
-- TOC entry 2278 (class 0 OID 0)
-- Dependencies: 1755
-- Name: COLUMN tests.actualoutcome; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tests.actualoutcome IS 'What was the actual output of the test?  Did it Pass or Fail or Indeterminate?
Indeterminate (I) means not enough information was gleaned in order to complete the test type and comparison type.  For instance, Is Alphabetic can''t be determined if value is Null.';


--
-- TOC entry 2279 (class 0 OID 0)
-- Dependencies: 1755
-- Name: COLUMN tests.outputvalue; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tests.outputvalue IS 'Value returned, somewhat mangled to fit  into a character column.';


--
-- TOC entry 2280 (class 0 OID 0)
-- Dependencies: 1755
-- Name: COLUMN tests.x; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tests.x IS 'first comparison value if applicable to the comparison test.  A Capitalization test won''t need any values, but a Greater Than test will.';


--
-- TOC entry 2281 (class 0 OID 0)
-- Dependencies: 1755
-- Name: COLUMN tests.y; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tests.y IS 'For between tests';


--
-- TOC entry 2282 (class 0 OID 0)
-- Dependencies: 1755
-- Name: COLUMN tests.invertcomparison; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tests.invertcomparison IS 'If true, make this a NOT test,  Do not use this in leu of setting desired outcome as Fail instead of Pass.
Pass should always be Green/Good.';


--
-- TOC entry 1754 (class 1259 OID 17102)
-- Dependencies: 1755 7
-- Name: tests_testid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tests_testid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.tests_testid_seq OWNER TO postgres;

--
-- TOC entry 2284 (class 0 OID 0)
-- Dependencies: 1754
-- Name: tests_testid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tests_testid_seq OWNED BY tests.testid;


--
-- TOC entry 2285 (class 0 OID 0)
-- Dependencies: 1754
-- Name: tests_testid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('tests_testid_seq', 3, true);


--
-- TOC entry 1757 (class 1259 OID 17135)
-- Dependencies: 7
-- Name: testtyps; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE testtyps (
    testtypid integer NOT NULL,
    testtypname character varying(100) NOT NULL,
    note text,
    isxreq boolean,
    isyreq boolean,
    isxreqnumeric boolean,
    isyreqnumeric boolean
);


ALTER TABLE public.testtyps OWNER TO postgres;

--
-- TOC entry 2286 (class 0 OID 0)
-- Dependencies: 1757
-- Name: TABLE testtyps; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE testtyps IS 'Types of tests, all singular, no combos, please.

Types are:
- returned row count
- error code
- col[0] value
- col[0] data type
- time to execute

DO NOT add types that your not prepared to code for. Each has a segment of code dedicated to processing it.';


--
-- TOC entry 2287 (class 0 OID 0)
-- Dependencies: 1757
-- Name: COLUMN testtyps.isxreqnumeric; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN testtyps.isxreqnumeric IS 'x, if present or required, must be numeric, as in, this test is a count or some such.';


--
-- TOC entry 1756 (class 1259 OID 17133)
-- Dependencies: 1757 7
-- Name: testtyps_testtypid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE testtyps_testtypid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testtyps_testtypid_seq OWNER TO postgres;

--
-- TOC entry 2289 (class 0 OID 0)
-- Dependencies: 1756
-- Name: testtyps_testtypid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE testtyps_testtypid_seq OWNED BY testtyps.testtypid;


--
-- TOC entry 2290 (class 0 OID 0)
-- Dependencies: 1756
-- Name: testtyps_testtypid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('testtyps_testtypid_seq', 17, true);


--
-- TOC entry 1731 (class 1259 OID 16771)
-- Dependencies: 7
-- Name: users; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE users (
    userid integer NOT NULL,
    note text,
    usersysid character varying(40) NOT NULL,
    sysdomain character varying(40),
    username character varying(100)
);


ALTER TABLE public.users OWNER TO postgres;

--
-- TOC entry 2291 (class 0 OID 0)
-- Dependencies: 1731
-- Name: TABLE users; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE users IS 'unique logins representing a person (contact).  In our company, users CANNOT share logins at this level.  No appids here.';


--
-- TOC entry 1730 (class 1259 OID 16769)
-- Dependencies: 1731 7
-- Name: users_userid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE users_userid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_userid_seq OWNER TO postgres;

--
-- TOC entry 2293 (class 0 OID 0)
-- Dependencies: 1730
-- Name: users_userid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE users_userid_seq OWNED BY users.userid;


--
-- TOC entry 2294 (class 0 OID 0)
-- Dependencies: 1730
-- Name: users_userid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('users_userid_seq', 1, false);


--
-- TOC entry 2068 (class 2604 OID 17057)
-- Dependencies: 1748 1747 1748
-- Name: actionid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE actionlog ALTER COLUMN actionid SET DEFAULT nextval('actionlog_actionid_seq'::regclass);


--
-- TOC entry 2082 (class 2604 OID 17262)
-- Dependencies: 1769 1768 1769
-- Name: colid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE columns ALTER COLUMN colid SET DEFAULT nextval('columns_colid_seq'::regclass);


--
-- TOC entry 2077 (class 2604 OID 17156)
-- Dependencies: 1758 1759 1759
-- Name: comptypid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE comptyps ALTER COLUMN comptypid SET DEFAULT nextval('comptyp_compid_seq'::regclass);


--
-- TOC entry 2058 (class 2604 OID 16686)
-- Dependencies: 1712 1713 1713
-- Name: connid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE connections ALTER COLUMN connid SET DEFAULT nextval('connections_connid_seq'::regclass);


--
-- TOC entry 2081 (class 2604 OID 17249)
-- Dependencies: 1767 1766 1767
-- Name: identid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE contactidentifiers ALTER COLUMN identid SET DEFAULT nextval('contactidentifiers_identid_seq'::regclass);


--
-- TOC entry 2080 (class 2604 OID 17238)
-- Dependencies: 1764 1765 1765
-- Name: pkcontact; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE contacts ALTER COLUMN pkcontact SET DEFAULT nextval('contacts_pkcontact_seq'::regclass);


--
-- TOC entry 2059 (class 2604 OID 16695)
-- Dependencies: 1714 1715 1715
-- Name: dbid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE databases ALTER COLUMN dbid SET DEFAULT nextval('dbs_dbid_seq'::regclass);


--
-- TOC entry 2060 (class 2604 OID 16704)
-- Dependencies: 1717 1716 1717
-- Name: envid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE environments ALTER COLUMN envid SET DEFAULT nextval('environments_envid_seq'::regclass);


--
-- TOC entry 2061 (class 2604 OID 16713)
-- Dependencies: 1718 1719 1719
-- Name: instanceid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE instances ALTER COLUMN instanceid SET DEFAULT nextval('instances_instanceid_seq'::regclass);


--
-- TOC entry 2062 (class 2604 OID 16722)
-- Dependencies: 1721 1720 1721
-- Name: insttypid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE insttyps ALTER COLUMN insttypid SET DEFAULT nextval('insttyps_insttypid_seq'::regclass);


--
-- TOC entry 2079 (class 2604 OID 17223)
-- Dependencies: 1762 1763 1763
-- Name: listertbid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE listertables ALTER COLUMN listertbid SET DEFAULT nextval('listertables_listertableid_seq'::regclass);


--
-- TOC entry 2063 (class 2604 OID 16731)
-- Dependencies: 1723 1722 1723
-- Name: loginid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE logins ALTER COLUMN loginid SET DEFAULT nextval('logins_loginid_seq'::regclass);


--
-- TOC entry 2071 (class 2604 OID 17085)
-- Dependencies: 1752 1751 1752
-- Name: macid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE macros ALTER COLUMN macid SET DEFAULT nextval('macros_macid_seq'::regclass);


--
-- TOC entry 2064 (class 2604 OID 16737)
-- Dependencies: 1725 1724 1725
-- Name: osid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE oses ALTER COLUMN osid SET DEFAULT nextval('oses_osid_seq'::regclass);


--
-- TOC entry 2078 (class 2604 OID 17208)
-- Dependencies: 1761 1760 1761
-- Name: libid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE portable_executables ALTER COLUMN libid SET DEFAULT nextval('portable_executables_libid_seq'::regclass);


--
-- TOC entry 2084 (class 2604 OID 17289)
-- Dependencies: 1773 1772 1773
-- Name: projectid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE projects ALTER COLUMN projectid SET DEFAULT nextval('projects_projectid_seq'::regclass);


--
-- TOC entry 2085 (class 2604 OID 17303)
-- Dependencies: 1774 1775 1775
-- Name: relid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE relations ALTER COLUMN relid SET DEFAULT nextval('relations_relid_seq'::regclass);


--
-- TOC entry 2069 (class 2604 OID 17072)
-- Dependencies: 1750 1749 1750
-- Name: scriptid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE scripts ALTER COLUMN scriptid SET DEFAULT nextval('scripts_scriptid_seq'::regclass);


--
-- TOC entry 2065 (class 2604 OID 16746)
-- Dependencies: 1727 1726 1727
-- Name: serverid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE servers ALTER COLUMN serverid SET DEFAULT nextval('servers_serverid_seq'::regclass);


--
-- TOC entry 2066 (class 2604 OID 16755)
-- Dependencies: 1728 1729 1729
-- Name: tbid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE tables ALTER COLUMN tbid SET DEFAULT nextval('tables_tbid_seq'::regclass);


--
-- TOC entry 2083 (class 2604 OID 17278)
-- Dependencies: 1770 1771 1771
-- Name: taskid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE tasks ALTER COLUMN taskid SET DEFAULT nextval('tasks_taskid_seq'::regclass);


--
-- TOC entry 2072 (class 2604 OID 17107)
-- Dependencies: 1754 1755 1755
-- Name: testid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE tests ALTER COLUMN testid SET DEFAULT nextval('tests_testid_seq'::regclass);


--
-- TOC entry 2076 (class 2604 OID 17138)
-- Dependencies: 1757 1756 1757
-- Name: testtypid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE testtyps ALTER COLUMN testtypid SET DEFAULT nextval('testtyps_testtypid_seq'::regclass);


--
-- TOC entry 2067 (class 2604 OID 16774)
-- Dependencies: 1731 1730 1731
-- Name: userid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE users ALTER COLUMN userid SET DEFAULT nextval('users_userid_seq'::regclass);


--
-- TOC entry 2167 (class 0 OID 17054)
-- Dependencies: 1748
-- Data for Name: actionlog; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY actionlog (actionid, note, whenadded) FROM stdin;
1	Added connection	\N
2	Added connection	\N
3	Added connection	\N
4	Updated connection	\N
5	Updated connection	\N
6	Updated connection	\N
7	Updated connection	\N
8	Updated connection	\N
9	Updated connection	\N
10	Updated connection	\N
11	Updated connection	\N
12	Added connection	\N
13	Added connection	\N
14	Added connection	\N
15	Updated connection	\N
16	Added connection	\N
17	Added connection	\N
18	Added connection	\N
19	Added connection	\N
20	Added connection	\N
21	Added connection	\N
22	Added connection	\N
23	Added connection	\N
24	Updated connection	\N
25	Updated connection	\N
26	Added connection	\N
27	Updated connection	\N
28	Updated connection	\N
29	Added connection	\N
30	Updated connection	\N
31	Updated connection	\N
32	Added connection	\N
33	Updated connection	\N
34	Added connection	\N
35	Added connection	\N
36	Added connection	\N
37	Added connection	\N
38	Added connection	\N
39	Added connection	\N
40	Added connection	\N
41	Added connection	\N
42	Added connection	\N
43	Added connection	\N
44	Added connection	\N
45	Added connection	\N
46	Added connection	\N
47	Added connection	\N
48	Added connection	\N
49	Added connection	\N
50	Added connection	\N
51	Added connection	\N
52	Added connection	\N
53	Added connection	\N
54	Added connection	\N
55	Added connection	\N
56	Added connection	\N
57	Added connection	\N
58	Added connection	\N
59	Added connection	\N
60	Added connection	\N
61	Added connection	\N
62	Added connection	\N
63	Added connection	\N
64	Added connection	\N
65	Added connection	\N
66	Added connection	\N
67	Added connection	\N
68	Added connection	\N
69	Added connection	\N
70	Added connection	\N
71	Added connection	\N
72	Added connection	\N
73	Added connection	\N
74	Added connection	\N
75	Added connection	\N
76	Added connection	\N
77	Added connection	\N
78	Added connection	\N
79	Added connection	\N
80	Added connection	\N
81	Added connection	\N
82	Added connection	\N
83	Added connection	\N
84	Added connection	\N
85	Added connection	\N
86	Added connection	\N
87	Added connection	\N
88	Added connection	\N
89	Added connection	\N
90	Added connection	\N
91	Added connection	\N
92	Added connection	\N
93	Added connection	\N
94	Added connection	\N
95	Added connection	\N
96	Added connection	\N
97	Added connection	\N
98	Added connection	\N
99	Added connection	\N
100	Updated connection	\N
101	Updated connection	\N
102	Updated connection	\N
103	Updated connection	\N
104	Updated connection	\N
105	Updated connection	\N
106	Updated connection	\N
107	Updated connection	\N
108	Updated connection	\N
109	Added connection	\N
110	Updated connection	\N
111	Added connection	\N
112	Updated connection	\N
\.


--
-- TOC entry 2178 (class 0 OID 17259)
-- Dependencies: 1769
-- Data for Name: columns; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY columns (colid, colname, srccolcode, srcdatatypcode, srcdatatypwdth, srcdataffstartpos, srcdatafffinpos, tbid, physord, note, srcdatatypdec, expwrapinquotes, bestfitwdth) FROM stdin;
19	Security Identifier Flag	\N	I	2	1	2	5	0	\N	\N	\N	10
7	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
8	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
9	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
10	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
11	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
12	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
22	Maturity Date	DS134	D	8	34	41	5	6	\N	\N	\N	40
13	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
14	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
15	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
45	Floater Security Flag	\N	A	1	273	273	5	32	\N	\N	\N	30
44	Private Placement Flag	\N	A	1	272	272	5	31	\N	\N	\N	25
42	Payment Frequency	\N	I	3	261	263	5	29	\N	\N	\N	25
41	Calculation Type	\N	I	4	257	260	5	28	\N	\N	\N	25
40	Industry Type	\N	I	6	251	256	5	27	\N	\N	\N	40
39	Product Key	\N	I	2	249	250	5	26	\N	\N	\N	30
38	Duff & Phelps	\N	A	8	241	248	5	25	\N	\N	\N	30
37	Fitch Rating	\N	A	8	233	240	5	24	\N	\N	\N	30
36	Moody's Rating	\N	A	8	225	232	5	23	\N	\N	\N	40
35	S & P Rating	\N	A	8	217	224	5	22	\N	\N	\N	40
34	Day Type	\N	I	2	215	216	5	21	\N	\N	\N	30
33	Next Coupon Date	\N	D	8	207	214	5	20	\N	\N	\N	40
32	Next Refix Date	\N	D	8	199	206	5	19	\N	\N	\N	50
31	Coupon Refix Frequency	\N	I	3	196	198	5	18	\N	\N	\N	40
30	First Coupon Date	\N	D	8	188	195	5	17	\N	\N	\N	40
24	Outstanding Amount	\N	F	20	122	141	5	11	Maturity size for munis	2	\N	80
25	Issue Amount	\N	F	20	142	161	5	12	Issue Size for munis	2	\N	80
26	Country Code	\N	I	3	162	164	5	13	Numeric by default, ISO is an option	\N	\N	20
27	Currency Code	\N	I	3	165	167	5	14	Numeric by default, ISO is an option	\N	\N	20
28	Issue Price	\N	F	12	168	179	5	15	\N	8	\N	40
29	Dated Date	\N	D	8	180	187	5	16	\N	\N	\N	40
21	Coupon	DS033	I	10	24	33	5	4	\N	\N	\N	53
3	Ticker	DS001	A	8	15	22	5	2	\N	\N	\N	73
20	Security Identifier	\N	A	12	3	14	5	1	\N	\N	t	100
4	Coupon Fractional Indicator	\N	I	1	23	23	5	3	\N	\N	\N	14
23	Issuer	\N	A	80	42	121	5	8	\N	\N	\N	260
43	Interest Accrual Date	\N	D	8	264	271	5	30	\N	\N	\N	25
46	Bloomberg Identifier	\N	A	12	468	479	5	33	\N	\N	t	100
47	SecDesc_	\N	A	28	627	654	5	34	\N	\N	\N	235
48	ProductType_	\N	A	28	599	626	5	35	\N	\N	\N	158
\.


--
-- TOC entry 2173 (class 0 OID 17153)
-- Dependencies: 1759
-- Data for Name: comptyps; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY comptyps (comptypid, comptypname, note) FROM stdin;
2	equal to	\N
10	in list x	\N
11	in series x	\N
13	contains x	\N
14	between x and y	\N
1	greater than x	\N
3	less than x	\N
5	less than or equal to x	\N
6	starts with x	\N
7	start with x after trim	\N
8	ends with x	\N
9	ends with x after trim	\N
12	contained within x	\N
4	greater than or equal to x	\N
-1	Unknown	\N
15	within x% of y	Calculate value/x * 100. Good for performance or detecting drastic change
16	within x of y	\N
\.


--
-- TOC entry 2157 (class 0 OID 16683)
-- Dependencies: 1713
-- Data for Name: connections; Type: TABLE DATA; Schema: public; Owner: postgres
--


--
-- TOC entry 2177 (class 0 OID 17246)
-- Dependencies: 1767
-- Data for Name: contactidentifiers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY contactidentifiers (identid, identifier, contactid, identtypid) FROM stdin;
1	Jeff	1	\N
2	Jeffery	1	\N
3	Jeffrey	1	\N
4	Jeff Humphreys	1	\N
5	Jeffrey Humphreys	1	\N
6	Jeffrey S. Humphreys	1	\N
7	Jeffrey Scott Humphreys	1	\N
8	Jeff Humphries	1	\N
\.


--
-- TOC entry 2176 (class 0 OID 17235)
-- Dependencies: 1765
-- Data for Name: contacts; Type: TABLE DATA; Schema: public; Owner: postgres
--


--
-- TOC entry 2158 (class 0 OID 16692)
-- Dependencies: 1715
-- Data for Name: databases; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY databases (dbid, dbname, note, dbaddress) FROM stdin;
0	CR_STAGING	on D426	D426.CR_STAGING
1	CR_STAGING	on U426	U426.CR_STAGING
2	CR_STAGING	on P426	P426.CR_STAGING
\.


--
-- TOC entry 2170 (class 0 OID 17095)
-- Dependencies: 1753
-- Data for Name: dual; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dual (dummy) FROM stdin;
1
\.


--
-- TOC entry 2159 (class 0 OID 16701)
-- Dependencies: 1717
-- Data for Name: environments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY environments (envid, envstdname, note, envlngname, envshrtname, envletter) FROM stdin;
4	SIT	\N	\N	\N	S
5	DR	Disaster Recovery	Disaster Recovery	DR	R
3	QA	aka Test	Quality Assurance	\N	Q
2	Prod	\N	Production	\N	P
1	UAT	\N	User Acceptance Testing	\N	U
0	Dev	\N	Development	\N	D
-1	Unknown	\N	\N	\N	\N
-2	Multi-Valued	\N	\N	\N	\N
-3	Unresolved	Have a string but can't find it in here.	\N	\N	\N
\.


--
-- TOC entry 2160 (class 0 OID 16710)
-- Dependencies: 1719
-- Data for Name: instances; Type: TABLE DATA; Schema: public; Owner: postgres
--

--
-- TOC entry 2161 (class 0 OID 16719)
-- Dependencies: 1721
-- Data for Name: insttyps; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY insttyps (insttypid, insttypname, note) FROM stdin;
-1	Unknown	\N
-2	Multi-Valued	\N
-3	Unresolved	\N
3	Sybase	Not implemented
4	Excel	Not implemented
5	Word	Not implemented
6	QC	Quality Center; not implemented
7	DB2	AS400 IBM DB2 workstations; not implemented
8	SQLite	Not implemented; U++ driver available
9	XML	Not implemented; U++ library available
10	Config	Not implemented
11	telnet	Connect to a server on port 23 using U++ socket class.
14	ftp	Use U++ ftp plugin classes; run scripts in script window.  Output goes to grid segement.
15	teleftp	telnet to a server and then ftp to another from there.  macro would fetch a file from ftp server b to telnet server a, then ftp back into server a and fetch file from there to local machine.
16	http	Configure proxy properly.
17	https	May work, see U++ SSL library.
18	soap	See U++ RPC functions, or use Get syntax from UPP web library
19	odbc	\N
20	ole	\N
21	oledb	\N
22	mysql	U++ driver available.
23	dbf	U++ dbf driver available.
2	PostgreSQL	Uses U++ driver.
1	Oracle	Custom version of U++ Oracle 8 code is being used, I corrected TIMESTAMP size error.
0	MS SQL	U++ Microsoft SQL Server really uses an ODBC wrapper.
\.


--
-- TOC entry 2175 (class 0 OID 17220)
-- Dependencies: 1763
-- Data for Name: listertables; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY listertables (listertbid, listertbname, physicaltbname, shortphysicalname, "nameunique?", note) FROM stdin;
1	actions	actionlog	?	f	\N
3	databases	dbs	db	f	\N
6	projects	projects	proj	f	Business View. Contains Procurements, Dates
10	teams	teams	team	t	These are all on Sides and Perspectives.  Consumer Teams are ruder.  We have more attributes about Provider Team, since that's my perspective (sorry all you consumer side).  Perspective is interesting.  Source teams are sources into us as a Provider.  Consumer sources aren't interesting to me yet.  But we as a Provider are a source to other people.  You could say we are a source to the provider, and we are a consumer to the source, but that's just silly.  For one thing, when on a conversation with anyone, we talk of "sources".  Consumers, users don't talk of us as a source.  I guess I should call consumers users, since that's what we call them.  Yeah. or clients.
11	users	users	usr	t	Switching to mean Client, cuz we all say "The User", like they do in TRON.
12	timelines	timelines	line	t	Timelines should update daily to keep the data easy to navigate.  They would link different values all to a specific time interval.  Status of source X for deliverable Y was G, target database L was 30%, all dated MM/DD/YY.  This would make metrics easier.  Save the data in meaningful format _before_ you think of the use, otherwise there's no history when you _do_ need the metric.
13	deliverables	deliverables	del	t	Attached to projects, cycles, tickets, dates, etc.
14	dates	dates	dt	t	Dates should be concrete, discrete things, because that's how people talk about them.  "Did we meet The Date?", "The Date slipped."  Then you attach to a Timeline, and track it thusly, and watch it slip away :)
15	signoffs	signoffs	sig	t	These are dumb.  Just stupid.  But tracking them is not dumb.  Managers come down with these ultimatums that you get a signoff from the user.  The manager, dev team, ba team, and user dev team, user bas, user, user manager, user manager's manager, all these cannot in any reality possibly agree on what _SIGN-OFF_ means.  They all come from different backgrounds.  If we were all experts at what each other does, why would we need the others?  So sign-offs are mandatory, and BAs should just try to ease them through.  If they can be forgotten, great!  If the managers forget, great!  But sometimes thats all they have on _their_ task list is "Get signoff from business".  FYI, no one ever goes back to a signoff and holds it over a user's head.  Think back.  Can you remember such a time.  Unless its a legal contract between parties external to each other, it doesn't matter.  Unless of course law suits come up, or SEC OCC gets involved, I suppose you'll pull that out then.  Scary stuff, but who lives like that?  Naw, just get the signoff.  We need scripts to ploy the user into sending a vague email, verbally clarifying how meaningless it is.
16	requirements	requirements	req	t	Requirements.  Data requirements, especially.  But they really refer to some Business requirement, or Reporting tool need, or a developer limitation need.  Some developers can't parse a string, or don't want to, so your stuck with a requirement to split some data into 2 columns.  Seems minor, but here we add weeks and complexity to a design, because warehouses can't just "add" any old column.  Here the perspective makes soooo much difference in expectations around timelines.\r\n\r\n          These are never clear enough, but sometimes they are over-complicated.  Clear doesn't mean Six Sigma (ugh!).  There needs to be templates around this that we provide to the User Team.  They need scope and dimensions outlined.
18	agreements	agreements	agr	t	"Agreements". Understanding? Don't use this word because its to legalese.  But you need a way to track when cross-sides agree, especially at contact points.  If in a Meeting you and the opposing BA agree verbally, as in, "Yeah, that'll work." GRAB IT!  Probably should try to say, "So, do you agree this Ticket can be Closed?".  Be vague if you need to squeeze, maybe you mean close the technical side, maybe you really mean "Ready for Production".  Don't be too clear, or they get confused!  But log the agreement if they really did.  Just ask yourself, will they remember this?  People usually remember if they really thought for a minute and _agreed_ to something. If its just a rambling conversation and the user's BA just was "yeah, yeah", or "yeah, whatever", then your causing yourself and others grief to write that down.  Consumers send verbal queues that we need to be alert for and responsive to, not try to manipulate.  Only because it won't work.  If manipulation worked, then I'd be for it.  But the nature of a _Consumer_ is that they can seek consumption elsewhere or even cease consuming, which leaves you out of a job as a _Provider_.
19	approvals	approvals	approv	t	Sounds like Signoffs in a third-normal-form sense.  This is the problem with developers designing tracking systems!  They can't think like a user!  They are *ALWAYS* trying to find the common shared data and so "save" and simplify a system.  HOWEVER, users are not systems!!! They can't be simplified.  Keep trying, though LOLOL.  Sad.  Not really funny.  Dev thinking vs. People think.  Who wins? Hopefully people-think.
4	environments	environments	env	t	Names are confused with "Cycles".  They are really just names for what I call instances.  But the names create political and legal requirements, like the SEC may require that all Production environments have certain access protocols, even specific vendors(!).  Shareholders view problems in certain environments as more serious.  So "what the fucks in a name" has serious implications.  Note  that people have shorthands for the same physical instance, which creates problems, too.  Joe may call it UAT, Steve calls it Pre-prod, Mary calls it QA or SIT.
7	sides	sides	side	t	User, Provider, Source.  User is good.  Source is good.  What are we?
8	cycles	cycles	cycle	t	A form of state from Waterfall design, but what really happens is the QA team just works with a date frame and then their done.  But, it has implications for people who here the term.  It implies the next cycle.  When people speak of cycles, they are implying the flow and theirs a stricter timeline, and very simple it is, too.  Its always one cycle to exactly the next.  They don't ever support moving back, though they do it all the time.  Waterfall design is dumb, but its what corps do.
5	documents	documents	doc	f	In a stage and versioned, release stage, _this version_ reviewed by
2	comparisontypes	comptyps	?	t	Comparison Types.
43	tasks	tasks	tsk	t	Same as tickets?  May not be related to a QC ticket, but usually is.  Attached to a list of scripts and tests that are related to resolving this task.
20	scopedimensions	scopedims	scopedim	t	As in, what Region is it for?  When you say Region, do you mean Business Region, or in terms of the application tool you use to report from or enter data into?  So, Bloomberg Region, etc.  Or a Reporting Region, something you report to management?  Or enter into some time management, commission tool?  Regions are just convenient classifiers, so they will not align to each other across all the areas they were conveniently created for.  In other words, people create them because they _feel_ right and fit some need. They always split up a coverage, and they have to add up to 100% coverage when you put the regions together, but users are generally not aware of the other regions outside their responsibility, so you can't ever get them to add up.  User X says NY, User Y says Domestic, User Z says Pacific Rim.  How do those add up??  We'll come up with a trick, and force users to describe in their own words what that region term means to them.  Otherwise each requirement reader will hear something different when it says "WC". Hah!
21	milestones	milestones	milstn	t	Millstones?  These are usually tied to dates.  They have some sort of measurability to them, and are often skipped, forgotten.  For BAs they could help with proving to users and managers that you actually MET your deliverable or requirement.  It is very hard to close a Ticket if you can't list milestones met.
22	tickets	tickets	tic	t	ickets, like everything, take on a life of their own, meaning they may have been creating to be helpful tracking tools, only to become tools for the user to beat you over the head with.  They often are just variations on a theme, but QC doesn't really support that!  Also, cycling tasks, like "Load source into UAT for 5/10 through 5/20.  Don't miss a day!!" becomes a non-closing ticket, which makes ticket metrics way off.  Average closure time becomes meaningless.  Longest open ticket: Meaninglessssss!  But does QC care? no.\r\n        Tickets also get CLOSED as in, pretty much done, and no one is going to work on them, but they have to stay open because they are _technically_ not done.  For instance, find .001% difference between two target environments that can't be understood, but we go forward anyway.  There needs to be separate statuses!  A status for "Cycle complete" needs to be different than the technical state flow of "Open"-"Closed".  Get it, people???  Seems simple, but they don't get it.  There needs to be a "Showstopper" flag, and which cycle its a show stopper for.  For instance, an incorrect data value could be a showstopper for UAT, QA, or Production release, or stable production.\r\n\r\n        Here's a thought: What about the fact that production is really many cycles?  There's the "baby" release when it goes out all pristine and broken and buggy, we all know its before the user needs it, because the Legal Day One is weeks further, but we can't allow ourselves to differentiate, or else we are admitting that Production release A is not perfect.  But it really is Alpha!  The stages in production should be named: Alpha, Beta, Release Candidate, Approved for Legal use, Stable, Mature, Sunsetted.  What about features no longer used?  Should be documented so they can be altered for new requirements.\r\n\r\n        User connectivity and interaction with the database needs to be tracked.  Views should be INSTEAD OF views or Stored proc APIs that log usage, and have some requirements that periodically force user involvement, even coincidentally.  These can be fabricated, like "Every year the user has to enter a new code or the partition breaks", I don't know.  Some way to force users to stay involved, so that when they are not (inevitably), the project can be more easily sunsetted.  Even build it into the signoff.  The signoff should go both ways.  "I commit to a data review, which, if I or my agent does not complete, means the project will enter sunset initialization" probably for some planned time.  There should be planned "random" outages or delays every year, just to see if anyone's out there.
23	hot sheets	hot sheets	sheets	t	Just made it up.  We have no good business term for those billions of lists of tickets that are de jour.  It would be nice to track these because you could say, "But in _December_ you said this was critical, now its just bag it?" Or "It wasn't on the list last year.  Now it is and your acting like it was always there?".  Really, not tracking these is a reason projects go ary(?).  It's like those rabbits the dogs chase round the track, except they at least get to a finish line.
24	impressions	impressions	imp	t	Nice word.  I like it.  Or project failures, wins, losses, reputational train-wrecks.  Without some tracking, how can you really measure the project outcome?  Ok, project x was 3 months late, but the user is really blowing his clients away.  Project Z came in under budget on time and the user scrapped it, or gets no alert output, or the legal requirement went away.  How to measure?
25	Meetings	meetings	meet	t	These would be nice to track.  They are initially in the project planner, but then at the end of the first meeting, someone says, "Let's meet every week to discuss just the blah blah.  Is that good?  Too often? Early enough?  Who should be on it?"  And the project plans out the window.  So yes we should track the project planned meetings, but more importantly, are we meeting every day 5 times a week with 20 user sides and not getting anywhere?  This could be an *Outlook* pull! Definitely a great use.  Think of it.  You could map the timeline to the fact that 3 User side BAs have been on every call since project kickoff, but only 2 ETL Provider side designers have been on 2 calls, then they've been rotated out ever since bi-weekly.  Could explain a project failure.  Or why is QA manager X always on Call B but never on Call A.  You could track intersections over time and realize that User Side BA A never has been on a meeting with Provider Side Manager B in the last 2 years!!!  And yet there might be assumptions that they had!  The relation between Meetings and successful delivery would be interesting.
26	feedback	feedback	feedbck	t	Some way to track.  Like impressions, includes emails, heard on meetings, personal impressions, calls.  But at feedback level it must linked to, uh - a feed?  Not an etl feed, I just mean it can't just float out there.  It would be interesting to link user feedback, user ba feedback on meetings, and manager feedback to The Team.  We get stuff from management like, "Really great progress this year on deliverables", from the user ba's, "This is really crappy and late data!", and from the user, <silence>.  Silence needs to be logged, by the way, because the absence of data can't be treated as being user silence, only an absence of data entry.
27	metrics	metrics	metrc	t	Measures.  Track.  Store.  Average. Analyze.  Make decisions and change.  Look for trends.  Correlations.  Do they make sense. Useful?  No? Discard.  Redo. Track metrics on the metrics:  Are anyone looking at them?  Who?  Who doesn't?  Who thinks there "stupid"?  Who lives and dies?  Are they a negative for The Team?  Users using them to club us?  Internal or external?  Upper management?  Too much work?  need to be automated? How? Who can?
28	emails	emails	email	t	What else?  Its what they are.  They are part of the fabric, no sense calling them anything else.  Track.  Use Outlook extracts to do so.  Who was CCd?  Who responded? Who was out and it was reflected back?  If people are out when an email was sent, you can bet they never will read it.  You must track "I'm out till next..." responses or here again the metric will become meaningless.
29	procurements	procurements	procrmnts	t	A project, but a source is always involved, the "Database" is always targeted, a user is involved, cycle involved, and a real Client project overrides it, in fact, multiple clients are linked to procurements, and want different attributes and cycles and stakeholding levels.\r\n      * Environments: Names are confused with "Cycles".  They are really just names for what I call instances.  But the names create political and legal requirements, like the SEC may require that all Production environments have certain access protocols, even specific vendors(!).  Shareholders view problems in certain environments as more serious.  So "what the fucks in a name" has serious implications.  Note  that people have shorthands for the same physical instance, which creates problems, too.
31	testtypes	testtyps	testtyp	t	\N
33	operatingsystems	oses	os	t	\N
38	macros	macros	mac	t	\N
40	listertables	listertables	listertable	t	\N
41	feeds	feeds	feed	t	These are how the ETL team and prod support team track things.  They need to be linked to the rest of the team.  We do a procurement, it turns into a feed, what does that entail?  They archive it, where?  What load is put on them.  I've found that they are doing some manual process every day to get it in, but never told anyone.  Did anyone tell them how much to backup, archive, what should be offsite?  What about the staging tables?  How long, indexed, retain, truncate, what?  How long do they run? Why so long? Why a type 2?  I found out they were doing a type 2 update, which means comparing every attribute incoming to every attribute in the target table, EVERY MORNING!  Why?  I had them take the input staging data, 200K rows, and do an MINUS operation, take the difference and just insert them.  I cut the load time from hours to 1 or 2 minutes.  No credit, though, which is a common issue with the seperation between BAs and ETL developers.  They don't like suggestions from BAs.  So it cuts down on people helping them.
42	reportingapps	reportingapps	repapp	t	Applications that users use to report or generate alerts with. Actimize, Actuate, MicroStrategy.
32	scripts	scripts	script	t	Scripts that can be Sent to a Connection for processing.  Text.
35	instances	instances	inst	t	Systems or servers, databases that must be a designate when a connection is instantiated.  Some vendors can host several instances per server, and each instance must be designated in the connection string.
39	connections	connections	conn	t	A tie between a login and an instance.  The pieces needed to establish an open connection.
37	servers	servers	serv	t	Any server that can have at least one IP.
36	instancetypes	insttyps	insttyp	t	The vendor type or interface type that the instance supports, such as Oracle, SQL Server, or FTP and Telnet.
30	tests	tests	test	t	A single script tied to parameters and a connection that can be executed and recorded its results.
34	logins	logins	login	t	The login and password as a pair.  Passwords are not stored separately since it is meaningless separate from the user login string.
\.


--
-- TOC entry 2162 (class 0 OID 16728)
-- Dependencies: 1723
-- Data for Name: logins; Type: TABLE DATA; Schema: public; Owner: postgres
--

--
-- TOC entry 2169 (class 0 OID 17082)
-- Dependencies: 1752
-- Data for Name: macros; Type: TABLE DATA; Schema: public; Owner: postgres
--

--
-- TOC entry 2163 (class 0 OID 16734)
-- Dependencies: 1725
-- Data for Name: oses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY oses (osid, osname, note) FROM stdin;
0	Windows	Version may make a difference when hacking.
1	UNIX	or linux
\.


--
-- TOC entry 2174 (class 0 OID 17205)
-- Dependencies: 1761
-- Data for Name: portable_executables; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY portable_executables (libid, libname, libpath, filesize, version, note, filetimestamp) FROM stdin;
2	ORACLIENT10.DLL	c:\\program files\\oracle\\product\\10.2.0\\client_1\\bin\\ORACLIENT10.DLL	2408448	10.2.0.3	works	2007-11-26 10:20:00
3	ORACOMMON10.DLL	\N	\N	\N	\N	\N
4	ORACORE10.DLL	\N	\N	\N	\N	\N
5	ORAGENERIC10.DLL	\N	\N	\N	\N	\N
6	ORAHASGEN10.DLL	\N	\N	\N	\N	\N
7	ORALDAPCLNT10.DLL	\N	\N	\N	\N	\N
8	ORAN10.DLL	\N	\N	\N	\N	\N
9	ORANCDS10.DLL	\N	\N	\N	\N	\N
10	ORANCRYPT10.DLL	\N	\N	\N	\N	\N
11	ORANHOST10.DLL	\N	\N	\N	\N	\N
12	ORANL10.DLL	\N	\N	\N	\N	\N
13	ORANLDAP10.DLL	\N	\N	\N	\N	\N
14	ORANLS10.DLL	\N	\N	\N	\N	\N
15	ORANRO10.DLL	\N	\N	\N	\N	\N
16	ORANTCP10.DLL	\N	\N	\N	\N	\N
17	ORANTNS10.DLL	\N	\N	\N	\N	\N
18	ORAOCR10.DLL	\N	\N	\N	\N	\N
19	ORANNZSBB10.DLL'	\N	\N	\N	\N	\N
20	ORAOCRB10.DLL	\N	\N	\N	\N	\N
21	ORAPLP10.DLL	\N	\N	\N	\N	\N
22	ORAPLS10.DLL	\N	\N	\N	\N	\N
23	ORASLAX10.DLL	\N	\N	\N	\N	\N
24	ORASNLS10.DLL	\N	\N	\N	\N	\N
25	ORASQL10.DLL	\N	\N	\N	\N	\N
26	ORAUNLS10.DLL	\N	\N	\N	\N	\N
27	ORAUTS.DLL	\N	\N	\N	\N	\N
28	ORAVSN10.DLL	\N	\N	\N	\N	\N
29	ORAXML10.DLL	\N	\N	\N	\N	\N
1	OCI.DLL	c:\\program files\\oracle\\product\\10.2.0\\client_1\\bin\\OCI.DLL	352256	10.2.0.1	works best\r\nOCIAttrGet\r\nOCIAttrSet\r\nOCIBindByPos\r\nOCIBindDynamic\r\nOCIBreak\r\nOCIDefineByPos\r\nOCIDescriptorAlloc\r\nOCIDescriptorFree\r\nOCIEnvCreate\r\nOCIEnvInit\r\nOCIEnvNlsCreate\r\nOCIErrorGet\r\nOCIHandleAlloc\r\nOCIHandleFree\r\nOCIInitialize\r\nOCILobAppend\r\nOCILobAssign\r\nOCILobCharSetForm\r\nOCILobCharSetId\r\nOCILobCopy\r\nOCILobDisableBuffering\r\nOCILobEnableBuffering\r\nOCILobErase\r\nOCILobFlushBuffer\r\nOCILobGetLength\r\nOCILobIsEqual\r\nOCILobLocatorIsInit\r\nOCILobRead\r\nOCILobTrim\r\nOCILobWrite\r\nOCILogoff\r\nOCILogon\r\nOCINlsCharSetIdToName\r\nOCINlsCharSetNameToId\r\nOCINlsEnvironmentVariableGet\r\nOCIParamGet\r\nOCIParamSet\r\nOCIPasswordChange\r\nOCIServerAttach\r\nOCIServerDetach\r\nOCISessionBegin\r\nOCISessionEnd\r\nOCIStmtExecute\r\nOCIStmtFetch\r\nOCIStmtGetBindInfo\r\nOCIStmtPrepare\r\nOCITerminate\r\nOCITransCommit\r\nOCITransDetach\r\nOCITransForget\r\nOCITransPrepare\r\nOCITransRollback\r\nOCITransStart\r\nwere all used just to connect!	2007-09-30 08:09:00
\.


--
-- TOC entry 2180 (class 0 OID 17286)
-- Dependencies: 1773
-- Data for Name: projects; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY projects (projectname, projectbriefname, note, projectid, masterprojectname) FROM stdin;
FIDecomm-jan2011PrepForSignoff	\N	Currently 5 tasks listed by User BA team as required	1	FIDecomm
\.


--
-- TOC entry 2181 (class 0 OID 17300)
-- Dependencies: 1775
-- Data for Name: relations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY relations (relid, fromid, toid, why, note, fromtbid, totbid) FROM stdin;
\.


--
-- TOC entry 2168 (class 0 OID 17069)
-- Dependencies: 1750
-- Data for Name: scripts; Type: TABLE DATA; Schema: public; Owner: postgres
--

--
-- TOC entry 2164 (class 0 OID 16743)
-- Dependencies: 1727
-- Data for Name: servers; Type: TABLE DATA; Schema: public; Owner: postgres
--

--
-- TOC entry 2165 (class 0 OID 16752)
-- Dependencies: 1729
-- Data for Name: tables; Type: TABLE DATA; Schema: public; Owner: postgres
--

--
-- TOC entry 2179 (class 0 OID 17275)
-- Dependencies: 1771
-- Data for Name: tasks; Type: TABLE DATA; Schema: public; Owner: postgres
--

--
-- TOC entry 2171 (class 0 OID 17104)
-- Dependencies: 1755
-- Data for Name: tests; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tests (testid, testname, note, scriptid, whenadded, connid, desiredoutcome, actualoutcome, outputvalue, x, y, invertcomparison, comptypid, testtypid) FROM stdin;
-1	\N	\N	-1	2010-12-16 20:46:16.938-07	-1	P	\N	\N	\N	\N	f	-1	-1
3	TestMistyDay	Corrected Type	89	2011-01-06 13:32:26.597-07	13	P	\N		10		f	1	2
\.


--
-- TOC entry 2172 (class 0 OID 17135)
-- Dependencies: 1757
-- Data for Name: testtyps; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY testtyps (testtypid, testtypname, note, isxreq, isyreq, isxreqnumeric, isyreqnumeric) FROM stdin;
1	returned row count	not a "count(*)" op, but the driver return	\N	\N	\N	\N
2	selected row count	An actual "count(*)" is first in select list.	\N	\N	\N	\N
3	error code	Specific to session type	\N	\N	\N	\N
4	generic error code	So, 'Violates unique constraint' regardless of database type. (instance type)	\N	\N	\N	\N
5	first column value	Test the first column value returned.	\N	\N	\N	\N
6	first columns datatype	specific datatype to connection type	\N	\N	\N	\N
7	first columns generic datatype	So "character varying" and "varchar2" are the same	\N	\N	\N	\N
8	first columns datalength	\N	\N	\N	\N	\N
-1	Unknown	\N	\N	\N	\N	\N
9	execution time	Track how long something took	\N	\N	\N	\N
10	parse error code	Failed to parse sql, specific session instance type.  Useful to verify all columns are there, or version of db still supports a function.	\N	\N	\N	\N
11	parse generic error code	Across all db types, a standard for "column missing" should be established for generic script writing	\N	\N	\N	\N
12	script text	For generated queries, we may want to test for strings like "SELECT" being present, or some search constant that was supposed to filter down.  Or test for "Error" in query creation from a generator.	\N	\N	\N	\N
14	script text word count	\N	\N	\N	\N	\N
15	script text line count	\N	\N	\N	\N	\N
16	script text line word count	\N	\N	\N	\N	\N
17	script text line character count	\N	\N	\N	\N	\N
13	script text character count	length in characters of actual script	\N	\N	\N	\N
\.


--
-- TOC entry 2166 (class 0 OID 16771)
-- Dependencies: 1731
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--


--
-- TOC entry 2087 (class 2606 OID 17217)
-- Dependencies: 1713 1713
-- Name: akconn; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY connections
    ADD CONSTRAINT akconn UNIQUE (connname);


--
-- TOC entry 2295 (class 0 OID 0)
-- Dependencies: 2087
-- Name: CONSTRAINT akconn ON connections; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON CONSTRAINT akconn ON connections IS 'Names must be unique since that is how the user browses in the ConnGrid.  Though I suppose the other attributes might give a clue.  Linkage and FKs are always on connid.';


--
-- TOC entry 2095 (class 2606 OID 17101)
-- Dependencies: 1719 1719
-- Name: akinstance; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY instances
    ADD CONSTRAINT akinstance UNIQUE (instancename);


--
-- TOC entry 2132 (class 2606 OID 17324)
-- Dependencies: 1763 1763
-- Name: aklistertable; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY listertables
    ADD CONSTRAINT aklistertable UNIQUE (listertbname);


--
-- TOC entry 2116 (class 2606 OID 17092)
-- Dependencies: 1752 1752
-- Name: akmacro; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY macros
    ADD CONSTRAINT akmacro UNIQUE (macname);


--
-- TOC entry 2124 (class 2606 OID 17145)
-- Dependencies: 1757 1757
-- Name: akpktesttyp; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY testtyps
    ADD CONSTRAINT akpktesttyp UNIQUE (testtypname);


--
-- TOC entry 2093 (class 2606 OID 16786)
-- Dependencies: 1717 1717
-- Name: environments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY environments
    ADD CONSTRAINT environments_pkey PRIMARY KEY (envid);


--
-- TOC entry 2111 (class 2606 OID 17062)
-- Dependencies: 1748 1748
-- Name: pkactionlog; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY actionlog
    ADD CONSTRAINT pkactionlog PRIMARY KEY (actionid);


--
-- TOC entry 2140 (class 2606 OID 17267)
-- Dependencies: 1769 1769
-- Name: pkcol; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY columns
    ADD CONSTRAINT pkcol PRIMARY KEY (colid);


--
-- TOC entry 2128 (class 2606 OID 17187)
-- Dependencies: 1759 1759
-- Name: pkcomptyp; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY comptyps
    ADD CONSTRAINT pkcomptyp PRIMARY KEY (comptypid);


--
-- TOC entry 2089 (class 2606 OID 16788)
-- Dependencies: 1713 1713
-- Name: pkconn; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY connections
    ADD CONSTRAINT pkconn PRIMARY KEY (connid);


--
-- TOC entry 2296 (class 0 OID 0)
-- Dependencies: 2089
-- Name: CONSTRAINT pkconn ON connections; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON CONSTRAINT pkconn ON connections IS 'Name should be "pkconnections" but I worry about names getting too long.  What is pg max length?';


--
-- TOC entry 2136 (class 2606 OID 17243)
-- Dependencies: 1765 1765
-- Name: pkcontact; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contacts
    ADD CONSTRAINT pkcontact PRIMARY KEY (pkcontact);


--
-- TOC entry 2138 (class 2606 OID 17251)
-- Dependencies: 1767 1767
-- Name: pkcontident; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contactidentifiers
    ADD CONSTRAINT pkcontident PRIMARY KEY (identid);


--
-- TOC entry 2091 (class 2606 OID 16790)
-- Dependencies: 1715 1715
-- Name: pkdb; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY databases
    ADD CONSTRAINT pkdb PRIMARY KEY (dbid);


--
-- TOC entry 2120 (class 2606 OID 17099)
-- Dependencies: 1753 1753
-- Name: pkdual; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dual
    ADD CONSTRAINT pkdual PRIMARY KEY (dummy);


--
-- TOC entry 2097 (class 2606 OID 16792)
-- Dependencies: 1719 1719
-- Name: pkinstance; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY instances
    ADD CONSTRAINT pkinstance PRIMARY KEY (instanceid);


--
-- TOC entry 2099 (class 2606 OID 16794)
-- Dependencies: 1721 1721
-- Name: pkinsttyp; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY insttyps
    ADD CONSTRAINT pkinsttyp PRIMARY KEY (insttypid);


--
-- TOC entry 2130 (class 2606 OID 17213)
-- Dependencies: 1761 1761
-- Name: pklib; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY portable_executables
    ADD CONSTRAINT pklib PRIMARY KEY (libid);


--
-- TOC entry 2134 (class 2606 OID 17228)
-- Dependencies: 1763 1763
-- Name: pklistertable; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY listertables
    ADD CONSTRAINT pklistertable PRIMARY KEY (listertbid);


--
-- TOC entry 2101 (class 2606 OID 16796)
-- Dependencies: 1723 1723
-- Name: pklogin; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY logins
    ADD CONSTRAINT pklogin PRIMARY KEY (loginid);


--
-- TOC entry 2118 (class 2606 OID 17090)
-- Dependencies: 1752 1752
-- Name: pkmacro; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY macros
    ADD CONSTRAINT pkmacro PRIMARY KEY (macid);


--
-- TOC entry 2103 (class 2606 OID 16798)
-- Dependencies: 1725 1725
-- Name: pkos; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY oses
    ADD CONSTRAINT pkos PRIMARY KEY (osid);


--
-- TOC entry 2144 (class 2606 OID 17294)
-- Dependencies: 1773 1773
-- Name: pkproj; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY projects
    ADD CONSTRAINT pkproj PRIMARY KEY (projectid);


--
-- TOC entry 2148 (class 2606 OID 17308)
-- Dependencies: 1775 1775
-- Name: pkrel; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY relations
    ADD CONSTRAINT pkrel PRIMARY KEY (relid);


--
-- TOC entry 2113 (class 2606 OID 17077)
-- Dependencies: 1750 1750
-- Name: pkscript; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY scripts
    ADD CONSTRAINT pkscript PRIMARY KEY (scriptid);


--
-- TOC entry 2105 (class 2606 OID 16800)
-- Dependencies: 1727 1727
-- Name: pkserver; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY servers
    ADD CONSTRAINT pkserver PRIMARY KEY (serverid);


--
-- TOC entry 2142 (class 2606 OID 17283)
-- Dependencies: 1771 1771
-- Name: pktask; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tasks
    ADD CONSTRAINT pktask PRIMARY KEY (taskid);


--
-- TOC entry 2107 (class 2606 OID 16802)
-- Dependencies: 1729 1729
-- Name: pktb; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tables
    ADD CONSTRAINT pktb PRIMARY KEY (tbid);


--
-- TOC entry 2122 (class 2606 OID 17112)
-- Dependencies: 1755 1755
-- Name: pktest; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tests
    ADD CONSTRAINT pktest PRIMARY KEY (testid);


--
-- TOC entry 2126 (class 2606 OID 17143)
-- Dependencies: 1757 1757
-- Name: pktesttyp; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY testtyps
    ADD CONSTRAINT pktesttyp PRIMARY KEY (testtypid);


--
-- TOC entry 2109 (class 2606 OID 16804)
-- Dependencies: 1731 1731
-- Name: pkuser; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT pkuser PRIMARY KEY (userid);


--
-- TOC entry 2145 (class 1259 OID 17314)
-- Dependencies: 1775
-- Name: fki_fkrelfromtb; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_fkrelfromtb ON relations USING btree (fromid);


--
-- TOC entry 2146 (class 1259 OID 17320)
-- Dependencies: 1775
-- Name: fki_fkreltotb; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_fkreltotb ON relations USING btree (toid);


--
-- TOC entry 2114 (class 1259 OID 17094)
-- Dependencies: 1750
-- Name: scripts_script_idx; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX scripts_script_idx ON scripts USING btree (script);


--
-- TOC entry 2154 (class 2606 OID 17268)
-- Dependencies: 1729 1769 2106
-- Name: fkcoltb; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY columns
    ADD CONSTRAINT fkcoltb FOREIGN KEY (tbid) REFERENCES tables(tbid) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2153 (class 2606 OID 17252)
-- Dependencies: 2135 1767 1765
-- Name: fkcontidentcont; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contactidentifiers
    ADD CONSTRAINT fkcontidentcont FOREIGN KEY (contactid) REFERENCES contacts(pkcontact) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2155 (class 2606 OID 17309)
-- Dependencies: 2133 1763 1775
-- Name: fkrelfromtb; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY relations
    ADD CONSTRAINT fkrelfromtb FOREIGN KEY (fromid) REFERENCES listertables(listertbid) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2156 (class 2606 OID 17315)
-- Dependencies: 1775 2133 1763
-- Name: fkreltotb; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY relations
    ADD CONSTRAINT fkreltotb FOREIGN KEY (toid) REFERENCES listertables(listertbid) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2152 (class 2606 OID 17193)
-- Dependencies: 1755 1759 2127
-- Name: fktestcomptyp; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tests
    ADD CONSTRAINT fktestcomptyp FOREIGN KEY (comptypid) REFERENCES comptyps(comptypid) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2150 (class 2606 OID 17146)
-- Dependencies: 2088 1713 1755
-- Name: fktestconn; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tests
    ADD CONSTRAINT fktestconn FOREIGN KEY (connid) REFERENCES connections(connid) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2149 (class 2606 OID 17113)
-- Dependencies: 1750 1755 2112
-- Name: fktestscript; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tests
    ADD CONSTRAINT fktestscript FOREIGN KEY (scriptid) REFERENCES scripts(scriptid) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2151 (class 2606 OID 17188)
-- Dependencies: 2125 1755 1757
-- Name: fktesttesttyp; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tests
    ADD CONSTRAINT fktesttesttyp FOREIGN KEY (testtypid) REFERENCES testtyps(testtypid) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2191 (class 0 OID 0)
-- Dependencies: 1759
-- Name: comptyps; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE comptyps FROM PUBLIC;
REVOKE ALL ON TABLE comptyps FROM postgres;
GRANT ALL ON TABLE comptyps TO postgres;
GRANT ALL ON TABLE comptyps TO PUBLIC;


--
-- TOC entry 2200 (class 0 OID 0)
-- Dependencies: 1713
-- Name: connections; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE connections FROM PUBLIC;
REVOKE ALL ON TABLE connections FROM postgres;
GRANT ALL ON TABLE connections TO postgres;
GRANT ALL ON TABLE connections TO PUBLIC;


--
-- TOC entry 2210 (class 0 OID 0)
-- Dependencies: 1715
-- Name: databases; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE databases FROM PUBLIC;
REVOKE ALL ON TABLE databases FROM postgres;
GRANT ALL ON TABLE databases TO postgres;
GRANT ALL ON TABLE databases TO PUBLIC;


--
-- TOC entry 2216 (class 0 OID 0)
-- Dependencies: 1717
-- Name: environments; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE environments FROM PUBLIC;
REVOKE ALL ON TABLE environments FROM postgres;
GRANT ALL ON TABLE environments TO postgres;
GRANT ALL ON TABLE environments TO PUBLIC;


--
-- TOC entry 2225 (class 0 OID 0)
-- Dependencies: 1719
-- Name: instances; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE instances FROM PUBLIC;
REVOKE ALL ON TABLE instances FROM postgres;
GRANT ALL ON TABLE instances TO postgres;
GRANT ALL ON TABLE instances TO PUBLIC;


--
-- TOC entry 2229 (class 0 OID 0)
-- Dependencies: 1721
-- Name: insttyps; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE insttyps FROM PUBLIC;
REVOKE ALL ON TABLE insttyps FROM postgres;
GRANT ALL ON TABLE insttyps TO postgres;
GRANT ALL ON TABLE insttyps TO PUBLIC;


--
-- TOC entry 2238 (class 0 OID 0)
-- Dependencies: 1723
-- Name: logins; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE logins FROM PUBLIC;
REVOKE ALL ON TABLE logins FROM postgres;
GRANT ALL ON TABLE logins TO postgres;
GRANT ALL ON TABLE logins TO PUBLIC;


--
-- TOC entry 2245 (class 0 OID 0)
-- Dependencies: 1725
-- Name: oses; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE oses FROM PUBLIC;
REVOKE ALL ON TABLE oses FROM postgres;
GRANT ALL ON TABLE oses TO postgres;
GRANT ALL ON TABLE oses TO PUBLIC;


--
-- TOC entry 2258 (class 0 OID 0)
-- Dependencies: 1750
-- Name: scripts; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE scripts FROM PUBLIC;
REVOKE ALL ON TABLE scripts FROM postgres;
GRANT ALL ON TABLE scripts TO postgres;
GRANT ALL ON TABLE scripts TO PUBLIC;


--
-- TOC entry 2261 (class 0 OID 0)
-- Dependencies: 1727
-- Name: servers; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE servers FROM PUBLIC;
REVOKE ALL ON TABLE servers FROM postgres;
GRANT ALL ON TABLE servers TO postgres;
GRANT ALL ON TABLE servers TO PUBLIC;


--
-- TOC entry 2265 (class 0 OID 0)
-- Dependencies: 1729
-- Name: tables; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE tables FROM PUBLIC;
REVOKE ALL ON TABLE tables FROM postgres;
GRANT ALL ON TABLE tables TO postgres;
GRANT ALL ON TABLE tables TO PUBLIC;


--
-- TOC entry 2272 (class 0 OID 0)
-- Dependencies: 1771
-- Name: tasks; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE tasks FROM PUBLIC;
REVOKE ALL ON TABLE tasks FROM postgres;
GRANT ALL ON TABLE tasks TO postgres;
GRANT ALL ON TABLE tasks TO PUBLIC;


--
-- TOC entry 2283 (class 0 OID 0)
-- Dependencies: 1755
-- Name: tests; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE tests FROM PUBLIC;
REVOKE ALL ON TABLE tests FROM postgres;
GRANT ALL ON TABLE tests TO postgres;
GRANT ALL ON TABLE tests TO PUBLIC;


--
-- TOC entry 2288 (class 0 OID 0)
-- Dependencies: 1757
-- Name: testtyps; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE testtyps FROM PUBLIC;
REVOKE ALL ON TABLE testtyps FROM postgres;
GRANT ALL ON TABLE testtyps TO postgres;
GRANT ALL ON TABLE testtyps TO PUBLIC;


--
-- TOC entry 2292 (class 0 OID 0)
-- Dependencies: 1731
-- Name: users; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE users FROM PUBLIC;
REVOKE ALL ON TABLE users FROM postgres;
GRANT ALL ON TABLE users TO postgres;
GRANT ALL ON TABLE users TO PUBLIC;


-- Completed on 2011-01-08 15:14:32

--
-- PostgreSQL database dump complete
--

